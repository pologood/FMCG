@function power($x, $n) {
    $ret: 1;

    @if $n >= 0 {
        @for $i from 1 through $n {
            $ret: $ret * $x;
        }
    }
    @else {
        @for $i from $n to 0 {
            $ret: $ret / $x;
        }
    }

    @return $ret;
}

@function factorial($x) {
    $ret: 1;

    @if $x > 0 {
        @while $x > 0 {
            $ret: $ret * $x;

            $x: $x - 1;
        }
    }

    @return $ret;
}

@function sin($x) {
    $ret: 0;

    @for $n from 0 to 25 {
        $ret: $ret + power(-1, $n) * power($x, 2 * $n + 1) / factorial(2 * $n + 1);
    }

    @return $ret;
}

@function cos($x) {
    $ret: 0;

    @for $n from 0 to 25 {
        $ret: $ret + power(-1, $n) * power($x, 2 * $n) / factorial(2 * $n);
    }

    @return $ret;
}

@function exp($x) {
    $ret: 0;

    @for $n from 0 to 25 {
        $ret: $ret + power($x, $n) / factorial($n);
    }

    @return $ret;
}

@function ln($x) {
    $ret: 0;
    $n: 1;
    $dx: 0.001;

    @while $n <= $x {
        $ret: $ret + $dx / $n;

        $n: $n + $dx;
    }

    @return $ret;
}

@function sqrt($x) {
    @return exp(0.5 * ln($x));
}

/// toFixed() function in Sass
/// @param {Number} $float - number to format
/// @param {Number} $digits (2) - number of digits to leave
/// @return {Number}
@function to-fixed($float, $digits: 2) {
    $sass-precision: 5;

    @if $digits > $sass-precision {
        @warn "Sass sets default precision to #{$sass-precision} digits, and there is no way to change that for now." + "The returned number will have #{$sass-precision} digits, even if you asked for `#{$digits}`." + "See https://github.com/sass/sass/issues/1122 for further informations.";
    }

    $pow: pow(10, $digits);

    @return round($float * $pow) / $pow;
}

/// Alias function to match JavaScript name
/// @alias to-fixed
@function toFixed($args...) {
    @return to-fixed($args);
}

/// Alias function to allow the use of precision()
/// @alias to-fixed
@function precision($args...) {
    @return to-fixed($args);
}